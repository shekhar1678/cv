# -*- coding: utf-8 -*-
"""Volume Estimation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kftpbO8Px3D3jCzCMpKfoygH_TyyJ794

# Yolo

Taken from https://github.com/zzh8829/yolov3-tf2
"""

###############################################################################
# This file generate tank_image folder, this data can be used to estimate the 
# volume of the tank.



###############################################################################
# https://stackoverflow.com/questions/22685274/divide-an-image-into-5x5-blocks-in-python-and-compute-histogram-for-each-block
import os
import cv2
import shutil
import gdown
import zipfile
path_to_zip_file = 'Oil Tanks.zip'
directory_to_extract_to = 'oil'

if not os.path.exists(path_to_zip_file):    
    print ("downlading complete files")
    print ("---------")
    os.system('gdown --id 1JA5YtBcL2462ekmyHxZcyj6Y6m3aiKt1')
    print ("downladed ")
    print ("---------")
    with zipfile.ZipFile(path_to_zip_file, 'r') as zip_ref:
        zip_ref.extractall(directory_to_extract_to)

    print ("downlading csv file")
    print ("---------")
    os.system('gdown --id 1vQiwpE1kNJ2lpmUvETxUs_tBLu822YuB')
    print("----------")
    print ("download complete")

def convert_to_smaller_patches(filename,to_be_stored):
  img = cv2.imread(filename)
  imgh, imgw, _ = img.shape
  print ("imgh=",imgh)
  print ("imgw=",imgw)

  resize = 512
  overlap = 37
  frmt = '.jpg'
  stored_file = os.path.basename(filename.rsplit('.jpg')[0])
  curr_dir = os.getcwd()
  print (curr_dir)
  os.chdir(to_be_stored)
  print ("current_dir=",os.getcwd())
  size = resize - overlap
  for row,i in enumerate(range(0,imgh-resize+1,size)):
    for col,j in enumerate(range(0,imgw-resize+1,size)):
        print ("row=",row)
        print ("col=",col)
        split = img[i:i+resize, j:j+resize]
        print (stored_file)
        cv2.imwrite('{}_{}_{}.{}'.format(stored_file,row,col, frmt), split)
  
  os.chdir(curr_dir)
if os.path.exists('small_path'):  
    shutil.rmtree(os.path.join(os.getcwd(),'small_path'))
else:
    os.system('mkdir small_path')

large_image = os.path.join(os.path.join(os.getcwd(),'oil'),os.path.join('Oil Tanks','large_images'))
for i in os.listdir(large_image):
  comp_path = os.path.join(large_image,i)
  convert_to_smaller_patches(comp_path,'small_path')

import pandas as pd
df = pd.read_csv('fht.csv')

df1=df.drop_duplicates(subset=['image_name'])

import ast
image=[]
bb = []
df1['bounding_box']=df1['bounding_box'].apply(ast.literal_eval)
for index,row in df1.iterrows():
   for val in  row['bounding_box']:
     bb.append(val)
     image.append(row['image_name'])

print (image[:20])
print (bb[:20])

df2 = pd.DataFrame()
df2['image_path']=image
df2['bounding_box']=bb
new_path = os.getcwd()
print ("*************************")
import sys
def change_path(path_name):
    if sys.platform=='win32':
        b = new_path.replace('\\','/') 
        return path_name.replace('/content',b)
    else:
        return path_name.replace('/content',new_path)

def once():
    s = 'tank_image'
    if not os.path.exists(os.path.join(os.getcwd(),s)):
        os.makedirs(os.path.join(os.getcwd(),s))
    dest = os.path.abspath(os.path.join(os.getcwd(),s))
    print (dest)
    for index,row in df2.iterrows():
        print (row['image_path'])
        shutil.copy(row['image_path'],dest)

df2['image_path']=df2['image_path'].apply(change_path)
print (df2.iloc[0]['image_path'])
once()
